# NOTE: DON'T UNCOMMENT ANYTHING IN THIS FILE 
# - alert: app_latency_above_5sec
#   expr: job:app_responce_latency_seconds:rate1m >=  5
#   for: 2m
#   labels:
      # app_type: frontend
#     # key value pairs is user choised. 
#     severity: critical
global:
  smtp_from: 'example@gmail.com'
  smtp_smarthost: smpt.gmail.com:587
  smtp_auth_username: 'example@gmail.com'
  smtp_auth_identity: 'example@gmail.com'
  smtp_auth_password: 'Rak$1234'

route:
  # default user when the specified labels are not matched then this "admin" user will get the email notification. we can call this user as 
  # root user 
  receiver: admin
  #when specified routes under the route configuration, then this mean that there are child receivers (we can call it as departments like db,fronten and backend)
  group_wait: 40 # it is a feature which is used to make alert sending in a waiting state for a 40 seconds. which means that alert manager will wait for 40 seconds before sending initial alert notification to user
  routes:
  # match_re is a sub configuration which is allows us add labels for email route. Means that when this labels are matched then only send 
  # email to under provided user or else send to defaut user (root user)
  - match_re: 
      # this labels are mentioned in the alerting rules file 
      app_type: (frontend|backend) # | symbol refers to (or) matcher will take both values, frontend and backend when label come with frontend or backend.
    #when the above labels are matched then send notification to this "FE-BE-user".
    receiver: FE-BE-user 
    # forntend team 
    routes:
    - match:
       app_type: frontend
      # this user is like root user for frontend team
      receiver: frontend-user
      # sub users will come now like for warning, alert has to send developer and for critical has to send to his manager. 
      group_by: [category] # we will be label this in alerting rule configuration like categroy: cpu and categroy: memory
      routes:
      - match:
          # app_type: frontend or backend, severity: warning or critical are the labels of each alert rule 
          # for better understanding i have mentioned alert rules configuration and commneted at the begining of this file  
          severity: warning
        receiver: frontend-developer
      - match:
          severity: critical
        receiver: frontend-manager
        # By default when alert manager finds required labels to send alert notification, then the alert manager will stop searching there itself.
        # because alert manager found its label. But in a case where we want alert manager to continue to search for labels. Then we use continue 
        continue: true 

  - match_re: 
      # this labels are mentioned in the alerting rules file 
      app_type: db # | symbol refers to (or) matcher will take both values, frontend and backend when label come with frontend or backend.
    #when the above labels are matched then send notification to this "FE-BE-user".
    receiver: db-user 
#############################------------------------#############################
#############################---inihibit-configuration----########################
# In a case when critical alert and warning alert came at the same time or in a nearer time, then we don't want to receive warning alert 
# because when critical already came in, there is a no use of warning so thats why we use inhibition 

inhibit_rules:
- source_match:
    severity: 'critical'
  # which alert we want to ignore. The particular alert should have this label severity: 'critical'
  target_match:
    severity: 'warning'
  # the both alerts should have this two label keys
  equal: ['app_type','category']


# In the above route configuraion we provided that which alerts has to send to which user. Now, we will provide user email configuration.
receivers:
- name: admin
  email_configs:
  - to: 'xxxxxxx@gmail.com'

- name: FE-BE-user
  email_configs:
  - to: 'fb-be-user@gmail.com'

- name: frontend-user
  email_configs:
  - to: 'frontend-user@gmail.com'

- name:  frontend-developer
  email_configs:
  - to: ' frontend-developer@gmail.com'

- name: frontend-manager
  email_configs:
  - to: 'frontend-manager@gmail.com'

- name: db-user
  email_configs:
  - to: 'db-user@gmail.com'

###########################--------SLACK CONFIGURATION----------#################
# - name: db-user
#   slack_configs:
#   - channel: '#prometheus'
#     api_url: <enter the slack channel unique url>
#     title: 'node_exporter is down'
#     text: 'node_exporter is down for more than 2 minutes'




# after writing your routings in alert manager configuration you can go and check with amtool "amtool check-config <your file name>"
# check the syntax. For visualization you can refer prometheus routing tree. 