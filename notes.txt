* for clause ----> which is used to hold the alert for certain period of time 
* Linux commands 
    - ps ax | grep <process-name> ex:- prometheus---> to search for the process ID
    - kill -HUP <process-ID>----> to stop the process
* when we want to segregate alerts based on critical, warning, and firing, we need to use labels in alerting rules.
    - for prometheus alerting labels, key value pairs is user defaind, not a pre defaind.
ALERT MANAGER:-
* alert manager is a tool which takes alerts from each of prometheus server and notify the user using various channels like slake SNS etc.
* alert manager is on of the component in prometheus configuration.

==============================
prometheus configuration
==============================
* when a job is added in prometheus configuration file, prometheus automatically pic the job name and instance. they are.... which we configured in scrape_config
* The example job is below 
    - job_name: cloudwatch_exporter
    honor_labels: true ------> when honor_labels set to true then the auto discovered labels cannot picked by prometheus 
      static_config:
      - targets: ['localhost:<port>']
================================
SLACK AND PROMETHEUS INTEGRATION 
================================

things to do slack end
-----------------------
* Go to slack official website and create a slack account there. There you can find create workspace click on that and procede with entering details.
* once channel has been created we need to install incoming webhooks which gives us the uniq URL which is used to integrate prometheus alert manager and slack.
* click on more button on left side bar and select apps and search for incoming webhooks
* when installing incoming webhooks they asks you for channel---> select the channel---> there you will find a uniq URL. make a note of that URL

thing to do prometheus alert manager
-------------------------------------
* open the alert manager config file and edit at the receiver main configuration as below 
- name: db-user
  slack_configs:
  - channel: '#prometheus'
    api_url: <enter the copied url from slack end>
    title: 'node_exporter is down'
    text: 'node_exporter is down for more than 2 minutes'


===================
BLACK BOX EXPORTER
===================
* Black box exporter is a probing exporter which is used to moniter the network endpoints such as HTTP,HTTPS,DNS,ICMP and TCP.
* On probing it give detailed metric about the request.


General notes:-
---------------
* in <black box url>/metrics has the black box metrics such as black box cpu and memory utilization. 
* in <black box url>/probes we can find the target metrics that are scraped. 


use cases:-
----------
* Used when we dont have a clear knowledge of system intenally.
* Used to measure responce time of a HTTP or HTTPS endpoint URLs.
* To resolve DNS responce times to recover the network latency issues of a application.
* To check availabilty of your services, their up time, network health and other things.

process:-
----------
* prometheus makes get request to the black box exporter using a modules.
* black box executes appropriate porbe to get metric from the targer for example,
    - when prometheus wants to watch prometheus.io.
    - prometheus makes a get request call to black box exporter through a module called ICMP.
    - exporter will executes a porbe to get metrics from pormetheus.io.


HTTP module :-
---------------
* Black box can access the systems using probes like HTTP, HTTPS, ICMP and TCP 
* To access our application by  Black box exporter we need write the modulues in Black box config file 
* below is examples of the http module 
    http_ipv4: ------> this is the module name. you can name it anything as your wish. 
      prober: http ------> mention the module 
      http:
        preffered_ip_protocol: ip4

    http_find_prom: ------> this is the module name. you can name it anything as your wish. 
      prober: http ------> mention the module 
      http:
        preffered_ip_protocol: ip4
        fail_if_body_not_match_regexp: -----> condition
        - "moniterning" -----> value for condition 

DNS module:-
-------------
* It is used to hit directly to the DNS addresses of a system 
* example :-

example_dns:
  prober: dns
  dns:
    preffered_ip_protocol: ip4
    transport_protocol: "tcp"
    query_name: "www.google.com"


Configure black-box exporter in prometheus config:-
----------------------------------------------------
* After writing modules in blackbox_exporter configuration then come to prometheus configuration and do the tasks below 
* Open the prometheus configuration file under the scrape config and add a job called "black-box-exporter"(the name would be your choice).
    job_name: 'black-box-exporter'
    static_config:
    - target: ['localhost:<expo-port>']
 - In the above scrape_config prometheus is only scraping blackbox_exporter metrics that which provided by black box not the target endpoints of blackbox_exporter 
   to scrape the target endpoints via blackbox_exporter we need to add some extra configuration in prometheus configuration as shown below 
    
scrape_configs:
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]  # Look for a HTTP 200 response.
    static_configs:
      - targets:
        - http://prometheus.io    # Target to probe with http.
        - https://prometheus.io   # Target to probe with https.
        - http://example.com:8080 # Target to probe with http on port 8080.
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.

========================
 Prometheus Pushgateway 
========================
* Pushgateway is a interface between prometheus server and a batch or crone jobes 
* In a case where Batch or crone jobs are running in short period of time, While prometheus scraping is initiated there mait jobs are not in a running state. 
  to overcome this problem Pushgateway comes into picture 
* while jobs running, the job metrics will pushed  to Pushgateway and from Pushgateway the prometheus will getpull metrics. 
* 9091 is default port number of Pushgateway 

prometheus pushed configuration:-
---------------------------------
* add a job in scrape_config as shown below 
   - job_name: Pushgateway
     static_configs:
     - targets: ['localhost:9091']


==============================
prometheus service discovery
==============================
* service discovery is nothing but a prometheus scrapes the system's metrics without have job in scrape_config configuration.

file service discovery
----------------------
* we will be adding a targets in a file called file_sd.yml and will refer this file in pormetheus configuraion file so that prometheus fetch the metrics from the 
  file service discovery

  ---> prometheus configuraion:-
  - job_name: node_exporter
    file_sd_configs:
    - files:
      - <path-to-file>/<filename>.yml
  
  ---> file_sd.yml would look like 
  - targets:
    - localhost:9091
    labels:
      team: "devops"
      region: "eu-central-1"

  - targets:
    - localhost:9091
    labels:
      team: "devops"
      region: "eu-central-1"
      
      
